# Autogenerated wrapper script for LAME_jll for x86_64-linux-gnu
export lame, libmp3lame

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `lame`
const lame_splitpath = ["bin", "lame"]

# This will be filled out by __init__() for all products, as it must be done at runtime
lame_path = ""

lame(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true) =
    executable_wrapper(f, lame_path, PATH, LIBPATH, LIBPATH_env, LIBPATH_default, ':', adjust_PATH, adjust_LIBPATH)

# Relative path to `libmp3lame`
const libmp3lame_splitpath = ["lib", "libmp3lame.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libmp3lame_path = ""

# libmp3lame-specific global declaration
# This will be filled out by __init__()
libmp3lame_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libmp3lame = "libmp3lame.so.0"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"LAME")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    global lame_path = get_exe_path!(PATH_list, artifact_dir, lame_splitpath)

    global libmp3lame_path, libmp3lame_handle
    libmp3lame_path, libmp3lame_handle = get_lib_path_handle!(LIBPATH_list, artifact_dir, libmp3lame_splitpath)

    global PATH, LIBPATH
    PATH, LIBPATH = cleanup_path_libpath!(PATH_list, LIBPATH_list, ':')
    
end  # __init__()

